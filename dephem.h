#pragma once
#ifndef dephemH
#define dephemH

#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif 

#include <cstdio>
#include <cstring>
#include <cstdint>
#include <limits>
#include <string>
#include <map>
#include <vector>

namespace dph
{
	// Индексы тел для EphemerisRelease::calculateBody(...).
	class Body
	{
	public:

		static constexpr unsigned MERCURY	= 1;
		static constexpr unsigned VENUS		= 2;
		static constexpr unsigned EARTH		= 3;
		static constexpr unsigned MARS		= 4;
		static constexpr unsigned JUPITER	= 5;
		static constexpr unsigned SATURN	= 6;
		static constexpr unsigned URANUS	= 7;
		static constexpr unsigned NEPTUNE	= 8;
		static constexpr unsigned PLUTO		= 9;
		static constexpr unsigned MOON		= 10;
		static constexpr unsigned SUN		= 11;
		static constexpr unsigned SSBARY	= 12;
		static constexpr unsigned EMBARY	= 13;

	private:
		Body();
	};

	// Индексы элементов для EphemerisRelease::calculateOther(...).
	class Other
	{
	public:

		static constexpr unsigned EARTH_NUTATIONS				= 14;
		static constexpr unsigned LUNAR_MANTLE_LIBRATION		= 15;
		static constexpr unsigned LUNAR_MANTLE_ANGULAR_VELOCITY	= 16;
		static constexpr unsigned TTmTDB						= 17;

	private:
		Other();
	};
	
	class EphemerisRelease
	{
	public:
		
		// -------------------------------- Общие методы класса -------------------------------- //

		// Конструктор по пути к бинарному файлу эфемерид.
		explicit EphemerisRelease(const std::string& binaryFilePath);

		// Конструктор копирования.
		EphemerisRelease(const EphemerisRelease& other);

		// Оператор копирования.
		EphemerisRelease& operator=(const EphemerisRelease& other);

		// Конструктор перемещения.
		EphemerisRelease(EphemerisRelease&& other) noexcept;

		// Оператор перемещения.
		EphemerisRelease& operator=(EphemerisRelease&& other) noexcept;

		// Деструктор.
		~EphemerisRelease();

		// ------------------------------- Основные методы класса -------------------------------//

		// Получить значение радиус-вектора (или вектора состояния) выбранного тела относительно 
		// другого на заданный момент времени.
		void calculateBody(unsigned targetBodyIndex, unsigned centerBodyIndex, double JED, 
			bool calculateState, double* resultArray) const;

		// Получить значение(-я) прочих элементов, хранящихся в выпуске эфемерид.
		void calculateOther(unsigned otherItemIndex, double JED, 
			bool calculateDerivative, double* resultArray) const;


		// -------------------------------------- ГЕТТЕРЫ -------------------------------------- //

		// Готов ли объект к работе.
		bool isReady() const;

		// Первая доступная дата для рассчёта.
		double startDate() const;

		// Последняя доступная дата для рассчёта.
		double endDate() const;

		// Получить номер выпуска.
		uint32_t releaseIndex() const;

		// Получить значение константы по её имени.
		double constant(const std::string& constantName) const;

	private:
		
		// ------------------------------ Внутренние значения ---------------------------------- //
		
		// Максимальное значение, хранимое в переменной типа "long". 
		// Требуется для передачи в функцию std::fseek (<cstdio>) в качестве параметра смещения,
		// при размерах файла превышающих данное значение.
		static constexpr size_t FSEEK_MAX_OFFSET = std::numeric_limits<long>::max();

		// Формат DE-эфемерид //
		static constexpr size_t RLS_LABELS_COUNT{ 3 };	// Кол-во строк Общей Информации (ОИ).
		static constexpr size_t RLS_LABEL_SIZE{ 84 };	// Кол-во символов в строке ОИ.
		static constexpr size_t CNAME_SIZE{ 6 };		// Кол-во символов в имени константы.
		static constexpr size_t CCOUNT_MAX_OLD{ 400 };	// Кол-во констант (стар. формат).
		static constexpr size_t CCOUNT_MAX_NEW{ 1000 };	// Кол-во констант (нов. формат).  

		// Готовность объекта к работе.
		bool m_ready{ false };
		
		// Работа с файлом //
		std::string	m_binaryFilePath;				// Путь к бинарному файлу выпуска эфемерид.
		FILE*		m_binaryFileStream{ nullptr };	// Поток чтения файла.

		// Значения, считанные из файла //
		std::string		m_releaseLabel;					// Строковая информация о выпуске. 
		uint32_t		m_releaseIndex{};				// Номерная часть индекса выпуска. 
		double			m_startDate{};					// Дата начала выпуска (JED).         
		double			m_endDate{};					// Дата окончания выпуска (JED).      
		double			m_blockTimeSpan{};				// Временная протяжённость блока.     
		uint32_t		m_keys[15][3]{};				// Ключи поиска коэффициентов.      	
		double			m_au{};							// Астрономическая единица (км).      
		double			m_emrat{};						// Отношение массы Земли к массе Луны.     
		std::map<std::string, double> m_constants;		// Константы выпуска.

		// Значения, дополнительно определённные внутри объекта //
		size_t		m_blocksCount{};	// Количество блоков в файле.                
		uint32_t	m_ncoeff{};			// Количество коэффициентов в блоке.         
		uint32_t	m_maxCheby{};		// Наибольшее количество сумм полиномов.     
		double		m_emrat2{};			// Отношение массы Луны к массе Земли и Луны.
		double		m_dimensionFit{};	// Значение для соблюдения размерности.      

		// Динамические массивы для работы с выпуском //
		mutable std::vector<double> m_buffer{};			// Коэффициенты блока, читаемые из файла.
		mutable std::vector<double> m_poly{ 1 };		// Значения полиномов.
		mutable std::vector<double> m_dpoly{ 0, 1 };	// Значения производных полиномов.


		// ------------------------- Внутренние методы работы объекта -------------------------- //

		// Обрезать повторяющиеся символы "symbolToCut" с конца массива символов "charArray" 
		// размера "arraySize".
		static std::string cutBackSymbols(const char* charArray, size_t arraySize,
			char symbolToCut);

		// Приведение объекта к изначальному состоянию.
		void clear();
		
		// Копирование информации из объекта "other" в текущий объект.
		void copy(const EphemerisRelease& other);

		// Перемещение информации из объекта "other" в текущий объект.
		void move(EphemerisRelease& other);

		//  Чтение файла.
		void readAndPackData();

		// Дополнительные вычисления после чтения файла.
		void additionalCalculations();

		// Проверка значений, хранящихся в объекте и проверка файла.
		bool isDataCorrect() const;

		// Заполнение буффера "m_buffer" коэффициентами требуемого блока.
		void fillBuffer(size_t block_num) const;

		// Интерполяция компонент выбранного базового элемента.
		void interpolatePosition(unsigned baseItemIndex, double normalizedTime, 
			const double* coeffArray, unsigned componentsCount, double* resultArray) const;

		// Интерполяция компонент и их производных выбранного базового элемента.
		void interpolateState(unsigned baseItemIndex, double normalizedTime,
			const double* coeffArray, unsigned componentsCount, double* resultArray) const;

		// Получить значения требуемых компонент базового элемента на выбранный момент времени.
		void calculateBaseItem(unsigned baseItemIndex, double JED, 
			bool calculateState, double* resultArray) const;

		// Получить значение радиус-вектора (или вектора состояния) Земли относительно
		// барицентра Солнечной Системы.
		void calculateBaseEarth(double JED, bool calculateState, double* resultArray) const;

		// Получить значение радиу-вектора (или вектора состояния) Луны относительно
		// барицентра Солнечной Системы.
		void calculateBaseMoon(double JED, bool calculateState, double* resultArray) const;
	};
}

#endif